using UxmlBindings;
using System;
using UnityEngine.UIElements;

namespace Sample.BaseWindow
{
	/// <summary>
	/// This sample window class will help you create a binding driven window class, which connects a binding with a window base class.
	/// Just make sure you add a IBaseBinding relation within your C#BindingTemplate.cs.txt to let the autogenerated binding code derive from IBaseBinding
	/// </summary>
	/// <typeparam name="T">The Binding this window is build upon</typeparam>
	public abstract class BaseWindow<T> where T : IBaseBinding
	{
		protected VisualElement m_root;
		public VisualElement root => m_root;

		protected readonly T m_binding;

		public BaseWindow(VisualElement root)
		{
			m_root = root;
			m_binding = (T)Activator.CreateInstance(typeof(T), m_root);
		}

		public void Enable()
		{
			// do any window enable related stuff in here
		}

		public void Disable()
		{
			// do any window disable related stuff in here
		}
	}
}
